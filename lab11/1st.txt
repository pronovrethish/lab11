#include <stdio.h>
#include <stdbool.h>

#define MAX 100

// Function to check if the graph is complete
bool isComplete(int graph[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i != j && graph[i][j] == 0) {
                return false;
            }
        }
    }
    return true;
}

// Function to calculate degree of a node (for undirected graph)
int degree(int graph[MAX][MAX], int n, int u) {
    int degree = 0;
    for (int i = 0; i < n; i++) {
        if (graph[u][i] == 1) {
            degree++;
        }
    }
    return degree;
}

// Function to calculate in-degree and out-degree of a node (for directed graph)
void indegreeOutdegree(int graph[MAX][MAX], int n, int u, int *indegree, int *outdegree) {
    *indegree = 0;
    *outdegree = 0;
    for (int i = 0; i < n; i++) {
        if (graph[i][u] == 1) (*indegree)++;
        if (graph[u][i] == 1) (*outdegree)++;
    }
}

// DFS function to check if a path exists between two vertices
bool DFS(int graph[MAX][MAX], int n, int start, int end, bool visited[MAX]) {
    visited[start] = true;
    if (start == end) return true;

    for (int i = 0; i < n; i++) {
        if (graph[start][i] == 1 && !visited[i]) {
            if (DFS(graph, n, i, end, visited)) {
                return true;
            }
        }
    }
    return false;
}

// Function to check if there is a path between two vertices
bool isPath(int graph[MAX][MAX], int n, int start, int end) {
    bool visited[MAX] = { false };
    return DFS(graph, n, start, end, visited);
}

int main() {
    int n, choice, graph[MAX][MAX];
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    do {
        printf("\nChoose an option:\n");
        printf("1. Test if graph is complete\n");
        printf("2. Get degree of a node (for undirected graph)\n");
        printf("3. Get in-degree and out-degree of a node (for directed graph)\n");
        printf("4. Check if a path exists between two vertices\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: {
                if (isComplete(graph, n)) {
                    printf("The graph is complete.\n");
                } else {
                    printf("The graph is not complete.\n");
                }
                break;
            }
            case 2: {
                int u;
                printf("Enter the node (0 to %d): ", n - 1);
                scanf("%d", &u);
                printf("Degree of node %d: %d\n", u, degree(graph, n, u));
                break;
            }
            case 3: {
                int u, indegree = 0, outdegree = 0;
                printf("Enter the node (0 to %d): ", n - 1);
                scanf("%d", &u);
                indegreeOutdegree(graph, n, u, &indegree, &outdegree);
                printf("In-degree of node %d: %d\n", u, indegree);
                printf("Out-degree of node %d: %d\n", u, outdegree);
                break;
            }
            case 4: {
                int start, end;
                printf("Enter the start node and end node (0 to %d): ", n - 1);
                scanf("%d %d", &start, &end);
                if (isPath(graph, n, start, end)) {
                    printf("There is a path between node %d and node %d.\n", start, end);
                } else {
                    printf("There is no path between node %d and node %d.\n", start, end);
                }
                break;
            }
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Try again.\n");
        }
    } while (choice != 5);

    return 0;
}
